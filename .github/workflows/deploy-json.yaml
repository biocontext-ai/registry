name: Create and deploy JSON

on:
  release:
    types: [published]
  push:
    branches: [main]
  workflow_dispatch:
  schedule:
    # Run on Mondays and Thursdays at 17:00 UTC
    - cron: "0 17 * * 1,4"

jobs:
  deploy-json:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache-dependency-path: "**/pyproject.toml"

      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Validate schema
        run: |
          uv run validate_mcp_server_schema

      - name: setup-yq
        run: |
          sudo curl -L "https://github.com/mikefarah/yq/releases/download/v4.28.2/yq_linux_amd64" > /usr/local/bin/yq
          sudo chmod +x /usr/local/bin/yq

      - name: Generate JSON
        run: |
          mkdir build
          touch build/.nojekyll
          cat servers/**/meta.yaml
          yq -o=json servers/**/meta.yaml | jq -s . > build/registry.json

      - name: Copy schema.json
        run: |
          cp schema.json build/schema.json

      - name: Check if JSON is empty
        run: |
          if [ ! -s build/registry.json ] || [ "$(cat build/registry.json)" = "[]" ]; then
            echo "Error: Generated JSON is empty"
            exit 1
          fi

      - name: Check if schema.json exists and is not empty
        run: |
          if [ ! -s build/schema.json ]; then
            echo "Error: schema.json is empty or does not exist"
            exit 1
          fi

      - name: Generate MCP JSON
        run: |
          uv run create_mcp_json

      - name: Copy mcp.json
        run: |
          cp mcp.json build/mcp.json

      - name: Get MCP Tools
        run: |
          uv run get_mcp_tools --config mcp.json --output build/mcp_tools.json

      - name: Build & Deploy Worker
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          preCommands: |
            npm install wrangler@latest

  update-registry:
    runs-on: ubuntu-latest
    needs: deploy-json
    timeout-minutes: 5
    steps:
      - name: Wait for deployment to be ready
        run: sleep 15

      - name: Update registry data
        run: |
          response=$(curl -s -w "\n%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            "https://biocontext.ai/api/registry/update")

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          echo "HTTP Status: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "✅ Successfully updated registry data!"
            echo "Response: $response_body"
          else
            echo "❌ Failed to update registry data"
            echo "Response: $response_body"
            exit 1
          fi

  update-github-data:
    runs-on: ubuntu-latest
    needs: update-registry
    timeout-minutes: 5
    steps:
      - name: Wait for deployment to be ready
        run: sleep 15

      - name: Update GitHub stars
        run: |
          response=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            "https://biocontext.ai/api/registry/stars")

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          echo "HTTP Status: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "✅ Successfully updated GitHub stars!"
            echo "Response: $response_body"
          else
            echo "❌ Failed to update GitHub stars"
            echo "Response: $response_body"
            exit 1
          fi

      - name: Update GitHub README content
        run: |
          response=$(curl -s -w "\n%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.CRON_SECRET }}" \
            -H "Content-Type: application/json" \
            "https://biocontext.ai/api/registry/readme")

          http_code=$(echo "$response" | tail -n1)
          response_body=$(echo "$response" | head -n -1)

          echo "HTTP Status: $http_code"

          if [ "$http_code" -eq 200 ]; then
            echo "✅ Successfully updated GitHub README content!"
            echo "Response: $response_body"
          else
            echo "❌ Failed to update GitHub README content"
            echo "Response: $response_body"
            exit 1
          fi
